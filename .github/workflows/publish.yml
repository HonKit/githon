name: Publish

# Publish npm and dockerhub when Release Pull Request is merged
#
# https://hub.docker.com/r/honkit/honkit
on:
  pull_request:
    branches:
      - master
    types: [closed]
env:
  DOCKER_HUB_BASE_NAME: honkit/honkit
  NODE_VERSION_OF_LATEST: 12

permissions: write-all
jobs:
  publish:
    runs-on: ubuntu-18.04
    outputs:
      exists_tag: ${{ steps.tag_check.outputs.exists_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        run: yarn install
      # Define ${CURRENT_VERSION}
      - name: Set Current Version
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
      - name: Tag Check
        id: tag_check
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Publish to npm
      - name: Publish
        if: steps.tag_check.outputs.exists_tag == 'false'
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          yarn run release-ci
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create Git Tag
        if: steps.tag_check.outputs.exists_tag == 'false'
        uses: pkgdeps/git-tag-action@v2
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"
      - name: Create Release
        id: create_release
        if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}

            ---

            [Comments](${{ github.event.pull_request.html_url }})
          draft: false
          prerelease: false
      - uses: actions/github-script@0.8.0
        if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸŽ‰ Release https://github.com/${{ github.repository }}/releases/tag/v${{ env.CURRENT_VERSION }}'
            })

  push:
    needs: publish
    if: needs.publish.outputs.exists_tag == 'false'
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        version: [12, 16]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.version }}-
      - name: Set Honkit package version
        run: echo "PACKAGE_VERSION=$(jq -r .version lerna.json)" >> $GITHUB_ENV
      - name: Set node version
        run: echo "NODE_VERSION=node${{ matrix.version }}" >> $GITHUB_ENV
      - name: Build image
        run: |
          docker buildx build \
            --file ${NODE_VERSION}/Dockerfile \
            --build-arg PACKAGE_VERSION=${PACKAGE_VERSION} \
            --tag ${DOCKER_HUB_BASE_NAME}:${NODE_VERSION} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --load \
            .
        working-directory: ./docker
      - name: Print node version in container image
        run: docker run --rm ${DOCKER_HUB_BASE_NAME}:${NODE_VERSION} --version
      - name: Set tag
        run: docker tag ${DOCKER_HUB_BASE_NAME}:${NODE_VERSION} ${DOCKER_HUB_BASE_NAME}:v${PACKAGE_VERSION}-${NODE_VERSION}
      - name: Set latest tag if default node version
        run: |
          docker tag ${DOCKER_HUB_BASE_NAME}:${NODE_VERSION} ${DOCKER_HUB_BASE_NAME}:v${PACKAGE_VERSION}
          docker tag ${DOCKER_HUB_BASE_NAME}:${NODE_VERSION} ${DOCKER_HUB_BASE_NAME}:latest
        if: matrix.version == env.NODE_VERSION_OF_LATEST
      - name: Login to Registries
        run: echo "${DOCKER_HUB_TOKEN}" | docker login -u ${DOCKER_HUB_USER} --password-stdin
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Push to Docker Hub
        run: docker push ${DOCKER_HUB_BASE_NAME} --all-tags
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
